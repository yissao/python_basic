{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercícios\n",
    "\n",
    "## 1. Mudança de Carga Tributária\n",
    "\n",
    "- Reformas e mudanças de cargas tributárias são bem comuns no Brasil.\n",
    "\n",
    "Digamos que você trabalhe em uma empresa de ecommerce\n",
    "\n",
    "No Brasil, o imposto sobre livros é zerado. De um ano para o outro, o governo criou um novo imposto que incide em 10% sobre o valor dos livros e agora você precisa alterar o registro dos preços dos livros da empresa para garantir que esse imposto vai ser repassado para o preço final do produto.\n",
    "\n",
    "Crie um código que recalcule o valor do livro da sua lista de produtos e ajuste na tabela.\n",
    "\n",
    "Além disso, calcule qual vai ser o impacto financeiro da criação desse imposto para a empresa (ou seja, quanto que o imposto vai aumentar de custo para a empresa)\n",
    "\n",
    "Obs: para facilitar, colocamos apenas 1 livro na lista, mas em breve vamos aprender um for que vai adaptar esse cenário para qualquer quantidade de livros na sua lista.\n",
    "\n",
    "Obs2: Seu código deve funcionar mesmo que não haja livros na lista de produtos da empresa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "teste = 94370000.0\n"
     ]
    }
   ],
   "source": [
    "produtos = ['computador', 'livro', 'tablet', 'celular', 'tv', 'ar condicionado', 'alexa', 'máquina de café', 'kindle']\n",
    "\n",
    "#cada item da lista dos produtos corresponde a quantidade de vendas no mês e preço, nessa ordem\n",
    "produtos_ecommerce = [\n",
    "    [10000, 2500],\n",
    "    [50000, 40],\n",
    "    [7000, 1200],\n",
    "    [20000, 1500],\n",
    "    [5800, 1300],\n",
    "    [7200, 2500],\n",
    "    [200, 800],\n",
    "    [3300, 700],\n",
    "    [1900, 400]\n",
    "]\n",
    "print(produtos.index('livro'))\n",
    "\n",
    "\n",
    "teste = 0\n",
    "produtos_ecommerce[produtos.index('livro')][1]*=1.1\n",
    "#faturamento.append (produtos_ecommerce.[0][0] * produtos_ecommerce.[0][1])\n",
    "#ISSAO:                                ^                           ^ não colocar ponto\n",
    "#    faturamento.append (produtos_ecommerce.[0][0] * produtos_ecommerce.[0][1])\n",
    "#                                          ^\n",
    "#SyntaxError: invalid syntax\n",
    "faturamento = [] #precisa declarar\n",
    "faturamento.append (produtos_ecommerce[0][0] * produtos_ecommerce[0][1])\n",
    "faturamento.append (produtos_ecommerce[1][0] * produtos_ecommerce[1][1])\n",
    "faturamento.append (produtos_ecommerce[2][0] * produtos_ecommerce[2][1])\n",
    "faturamento.append (produtos_ecommerce[3][0] * produtos_ecommerce[3][1])\n",
    "faturamento.append (produtos_ecommerce[4][0] * produtos_ecommerce[4][1])\n",
    "faturamento.append (produtos_ecommerce[5][0] * produtos_ecommerce[5][1])\n",
    "faturamento.append (produtos_ecommerce[6][0] * produtos_ecommerce[6][1])\n",
    "faturamento.append (produtos_ecommerce[7][0] * produtos_ecommerce[7][1])\n",
    "faturamento.append (produtos_ecommerce[8][0] * produtos_ecommerce[8][1])\n",
    "#teste = produtos_ecommerce[produtos.index('livro')][1]\n",
    "#teste = faturamento.sum\n",
    "teste = sum(faturamento)\n",
    "print('teste = {}'.format(teste))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "teste = 2200000.0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "teste = (produtos_ecommerce[1][0] * produtos_ecommerce[1][1])\n",
    "print('teste = {}'.format(teste))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "produto = input('Qual item deseja reajustar o preço? ').strip().casefold()\n",
    "\n",
    "if produto in produtos:\n",
    "\n",
    "    taxa = int(input(f'Qual o valor do reajuste? (%): '))\n",
    "\n",
    "   reajustado = produtos_ecommerce[produtos.index(produto)][1] + produtos_ecommerce[produtos.index(produto)][1]  * taxa / 100 * produtos_ecommerce[produtos.index(produto)][0] \n",
    "\n",
    "else:\n",
    "\n",
    "    print(f'Produto {produto} não encontrado')\n",
    "\n",
    "print(f'O produto foi reajustado  para R${reajustado:,.2f} em vendas no mês')\n",
    "\n",
    "\n",
    "\n",
    "# OU\n",
    "\n",
    "\n",
    "\n",
    "produto = input('Qual produto deseja reajustar o preço? ').strip().casefold()\n",
    "\n",
    "if produto in produtos:\n",
    "\n",
    "    new_tax = int(input('Qual o valor de reajuste? (%): '))\n",
    "\n",
    "    i = produtos.index(produto)\n",
    "\n",
    "    preco = produtos_ecommerce[i][1]\n",
    "\n",
    "    quantidade = produtos_ecommerce[i][0]\n",
    "\n",
    "    reajustado = preco + preco * taxa / 100 * quantidade\n",
    "\n",
    "else:\n",
    "\n",
    "    print(f'Produto {produto} não encontrado')\n",
    "\n",
    "print(f'O produto foi reajustado  para R${reajustado:,.2f} em vendas no mês')\n",
    "\n",
    " \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Desses dois códigos,  um tem menos variáveis porem muito repetitivo \n",
    "\n",
    "o outro contem mais variaveis porem menos repetitivo e mais fácil de compreender.\n",
    "\n",
    "\n",
    "\n",
    "Minha dúvida é, pro mercado, qual a melhor prática de boas maneiras?\n",
    "\n",
    "criar menos variáveis (mesmo que fique um pouco confuso) ou criar mais variáveis e deixar mais fácil de visualizar o código?\n",
    "\n",
    "\n",
    "\n",
    "Outra dúvida:\n",
    "\n",
    "\n",
    "\n",
    "criando muitas variáveis, isso não torna mais pesado o programa? \n",
    "\n",
    "Me baseando que tivermos uma base de dados gigante, quanto menos variáveis não seria a melhor prática?\n",
    "\n",
    "vlw...."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
